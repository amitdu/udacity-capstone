Description: >
  CloudFormation template to create Kubernetes Stack
Parameters:
  EnvironmentName:
    Description: The environment name for the project.
    Type: String
    Default: UdacityCapstone

Resources:
  EKSClusterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EKSClusterInstanceRole

  EKSClusterInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      RoleName: !Join ["-", [!Ref "AWS::StackName", "EKS-Cluster-Role"]]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess

  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for EKS Cluster
      GroupName:
        !Join ["-", [!Ref "AWS::StackName", "EKS-Cluster-Security-Group"]]
      VpcId:
        Fn::ImportValue: !Sub VPC
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}-EKS-Cluster"
          Value: "owned"
        - Key: "Name"
          Value:
            !Join ["-", [!Ref "AWS::StackName", "EKS-Cluster-Security-Group"]]
  EKSCluster:
    Type: "AWS::EKS::Cluster"
    Properties:
      Name: !Sub "${AWS::StackName}-EKS-Cluster"
      RoleArn: !GetAtt EKSClusterInstanceRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub PrivateSubnet
          - Fn::ImportValue: !Sub PublicSubnet

  WorkerNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref WorkerNodeInstanceRole

  WorkerNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      RoleName: !Join ["-", [!Ref "AWS::StackName", "EKS-Worker-Node-Role"]]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  EKSNodegroup:
    Type: "AWS::EKS::Nodegroup"
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-EKS-Cluster"
      NodeRole: !GetAtt WorkerNodeInstanceRole.Arn
      ScalingConfig:
        MinSize: 3
        DesiredSize: 5
        MaxSize: 7
      Labels:
        Release: !Sub "${AWS::StackName}-Worker-Node"
      Subnets:
        - Fn::ImportValue: !Sub PrivateSubnet
        - Fn::ImportValue: !Sub PublicSubnet
